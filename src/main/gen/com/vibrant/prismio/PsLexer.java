// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Prismio.flex

package com.vibrant.prismio;

import com.intellij.psi.tree.IElementType;
import com.vibrant.prismio.psi.PrismioTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


public class PsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\2\11\1\12\1\13\1\14\1\15"+
    "\1\11\1\0\1\16\1\17\1\20\12\21\1\22\1\0"+
    "\1\7\1\23\1\7\2\0\1\24\1\25\1\26\2\24"+
    "\1\27\2\24\1\30\11\24\1\31\7\24\1\32\1\33"+
    "\1\34\1\35\1\24\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\24\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\24\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\3\24\1\0\1\63\1\0\1\11"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\3\1\1\1\3"+
    "\1\1\1\3\1\4\1\5\17\6\1\7\2\10\1\7"+
    "\1\10\1\1\3\0\1\11\1\0\1\12\14\6\1\13"+
    "\5\6\1\0\1\7\1\2\1\7\3\0\1\14\16\6"+
    "\3\0\1\14\6\6\1\15\2\0\1\14\3\6\2\0"+
    "\1\6\13\0\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\152\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0173\0\152\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\237\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\u01a8\0\u01a8\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0212\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0601\0\u0a8f\0\u0597\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u0212\0\u10c5\0\u10fa\0\152\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\152"+
    "\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\5\1\6\1\7\1\10\2\3\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\3\3\1\7\1\16\1\24"+
    "\1\25\1\16\1\26\1\27\2\16\1\30\6\16\1\31"+
    "\1\16\1\32\1\16\1\33\1\34\1\7\1\3\1\35"+
    "\1\36\1\37\1\40\1\37\1\40\1\41\24\35\1\42"+
    "\31\35\66\0\6\4\101\0\1\7\54\0\1\43\64\0"+
    "\1\44\70\0\1\45\1\0\1\14\64\0\1\46\60\0"+
    "\1\47\2\0\1\50\65\0\1\16\2\0\6\16\4\0"+
    "\25\16\23\0\1\16\2\0\6\16\4\0\15\16\1\51"+
    "\7\16\23\0\1\16\2\0\6\16\4\0\7\16\1\52"+
    "\15\16\23\0\1\16\2\0\6\16\4\0\12\16\1\53"+
    "\12\16\23\0\1\16\2\0\6\16\4\0\14\16\1\54"+
    "\10\16\23\0\1\16\2\0\6\16\4\0\21\16\1\55"+
    "\3\16\23\0\1\16\2\0\6\16\4\0\17\16\1\56"+
    "\5\16\23\0\1\16\2\0\6\16\4\0\12\16\1\57"+
    "\2\16\1\60\7\16\23\0\1\16\2\0\6\16\4\0"+
    "\12\16\1\61\1\16\1\62\10\16\23\0\1\16\2\0"+
    "\6\16\4\0\1\63\14\16\1\64\7\16\23\0\1\16"+
    "\2\0\6\16\4\0\5\16\1\65\5\16\1\66\11\16"+
    "\23\0\1\16\2\0\6\16\4\0\4\16\1\67\20\16"+
    "\23\0\1\16\2\0\6\16\4\0\17\16\1\70\5\16"+
    "\23\0\1\16\2\0\6\16\4\0\15\16\1\71\7\16"+
    "\23\0\1\16\2\0\6\16\4\0\7\16\1\72\15\16"+
    "\2\0\2\35\1\0\1\35\1\0\26\35\1\73\32\35"+
    "\1\36\1\41\1\74\1\41\1\74\1\36\24\35\1\73"+
    "\32\35\1\75\1\4\1\75\1\4\2\75\24\35\1\73"+
    "\31\35\1\0\2\41\1\4\1\41\1\4\1\41\56\0"+
    "\5\35\1\76\56\35\33\0\1\77\64\0\1\100\32\0"+
    "\15\101\1\102\47\101\2\50\1\0\2\50\1\0\57\50"+
    "\21\0\1\16\2\0\6\16\4\0\15\16\1\103\7\16"+
    "\23\0\1\16\2\0\6\16\4\0\1\64\24\16\23\0"+
    "\1\16\2\0\6\16\4\0\15\16\1\104\7\16\23\0"+
    "\1\16\2\0\6\16\4\0\21\16\1\65\3\16\23\0"+
    "\1\16\2\0\6\16\4\0\17\16\1\105\5\16\23\0"+
    "\1\16\2\0\6\16\4\0\4\16\1\106\20\16\23\0"+
    "\1\16\2\0\6\16\4\0\1\107\24\16\23\0\1\16"+
    "\2\0\6\16\4\0\14\16\1\110\10\16\23\0\1\16"+
    "\2\0\6\16\4\0\20\16\1\111\4\16\23\0\1\16"+
    "\2\0\6\16\4\0\22\16\1\112\2\16\23\0\1\16"+
    "\2\0\6\16\4\0\12\16\1\113\12\16\23\0\1\16"+
    "\2\0\6\16\4\0\17\16\1\65\5\16\23\0\1\16"+
    "\2\0\6\16\4\0\16\16\1\114\6\16\23\0\1\16"+
    "\2\0\6\16\4\0\21\16\1\115\3\16\23\0\1\16"+
    "\2\0\6\16\4\0\22\16\1\116\2\16\23\0\1\16"+
    "\2\0\6\16\4\0\10\16\1\117\14\16\23\0\1\16"+
    "\2\0\6\16\4\0\10\16\1\120\14\16\2\0\1\35"+
    "\1\74\1\4\1\74\1\4\2\74\24\35\1\73\35\35"+
    "\1\0\26\35\1\73\31\35\35\0\1\121\64\0\1\122"+
    "\27\0\15\101\1\123\47\101\15\0\1\102\2\0\1\124"+
    "\65\0\1\16\2\0\6\16\4\0\12\16\1\65\12\16"+
    "\23\0\1\16\2\0\6\16\4\0\1\54\24\16\23\0"+
    "\1\16\2\0\6\16\4\0\10\16\1\125\14\16\23\0"+
    "\1\16\2\0\6\16\4\0\1\126\24\16\23\0\1\16"+
    "\2\0\6\16\4\0\20\16\1\127\4\16\23\0\1\16"+
    "\2\0\6\16\4\0\21\16\1\130\3\16\23\0\1\16"+
    "\2\0\6\16\4\0\4\16\1\65\20\16\23\0\1\16"+
    "\2\0\6\16\4\0\13\16\1\65\11\16\23\0\1\16"+
    "\2\0\6\16\4\0\20\16\1\116\4\16\23\0\1\16"+
    "\2\0\6\16\4\0\15\16\1\131\7\16\23\0\1\16"+
    "\2\0\6\16\4\0\22\16\1\132\2\16\23\0\1\16"+
    "\2\0\6\16\4\0\4\16\1\133\20\16\23\0\1\16"+
    "\2\0\6\16\4\0\3\16\1\65\21\16\23\0\1\16"+
    "\2\0\6\16\4\0\12\16\1\111\12\16\12\0\1\134"+
    "\66\0\1\135\52\0\15\101\1\123\2\101\1\136\44\101"+
    "\20\0\1\124\65\0\1\16\2\0\6\16\4\0\14\16"+
    "\1\137\10\16\23\0\1\16\2\0\6\16\4\0\11\16"+
    "\1\65\13\16\23\0\1\16\2\0\6\16\4\0\20\16"+
    "\1\65\4\16\23\0\1\16\2\0\6\16\4\0\10\16"+
    "\1\140\14\16\23\0\1\16\2\0\6\16\4\0\17\16"+
    "\1\54\5\16\23\0\1\16\2\0\6\16\4\0\17\16"+
    "\1\141\5\16\35\0\1\142\64\0\1\143\52\0\1\16"+
    "\2\0\6\16\4\0\6\16\1\65\16\16\23\0\1\16"+
    "\2\0\6\16\4\0\14\16\1\144\10\16\23\0\1\16"+
    "\2\0\6\16\4\0\14\16\1\65\10\16\36\0\1\145"+
    "\64\0\1\146\51\0\1\16\2\0\6\16\4\0\22\16"+
    "\1\111\2\16\65\0\1\147\64\0\1\150\34\0\1\151"+
    "\64\0\1\152\50\0\1\153\64\0\1\154\61\0\1\155"+
    "\64\0\1\156\65\0\1\157\61\0\1\160\62\0\1\161"+
    "\54\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5300];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\5\1\1\11\25\1\3\0"+
    "\1\1\1\0\23\1\1\0\3\1\3\0\17\1\3\0"+
    "\10\1\2\0\1\11\3\1\2\0\1\1\13\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 16: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 17: break;
          case 3:
            { yybegin(YYINITIAL); return PrismioTypes.OPERATOR;
            }
          // fall through
          case 18: break;
          case 4:
            { yybegin(YYINITIAL); return PrismioTypes.INTEGER;
            }
          // fall through
          case 19: break;
          case 5:
            { yybegin(WAITING_VALUE); return PrismioTypes.SEPARATOR;
            }
          // fall through
          case 20: break;
          case 6:
            { yybegin(YYINITIAL); return PrismioTypes.IDENTIFIER;
            }
          // fall through
          case 21: break;
          case 7:
            { yybegin(YYINITIAL); return PrismioTypes.VALUE;
            }
          // fall through
          case 22: break;
          case 8:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 23: break;
          case 9:
            { yybegin(YYINITIAL); return PrismioTypes.FLOAT;
            }
          // fall through
          case 24: break;
          case 10:
            { yybegin(YYINITIAL); return PrismioTypes.SINGLE_LINE_COMMENT;
            }
          // fall through
          case 25: break;
          case 11:
            { yybegin(YYINITIAL); return PrismioTypes.KEYWORD;
            }
          // fall through
          case 26: break;
          case 12:
            { yybegin(YYINITIAL); return PrismioTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 27: break;
          case 13:
            { yybegin(YYINITIAL); return PrismioTypes.BOOLEAN;
            }
          // fall through
          case 28: break;
          case 14:
            { yybegin(YYINITIAL); return PrismioTypes.CHARACTER_LITERAL;
            }
          // fall through
          case 29: break;
          case 15:
            { yybegin(YYINITIAL); return PrismioTypes.STRING_LITERAL;
            }
          // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
