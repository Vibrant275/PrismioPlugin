// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Prismio.flex

package com.vibrant.prismio;

import com.intellij.psi.tree.IElementType;
import com.vibrant.prismio.psi.PrismioTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


public class PsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\2\11\1\12\1\13\1\14\1\15"+
    "\1\11\1\0\1\11\1\16\1\17\12\20\1\21\1\0"+
    "\1\7\1\22\1\7\2\0\1\23\1\24\1\25\2\23"+
    "\1\26\2\23\1\27\11\23\1\30\7\23\1\31\1\32"+
    "\1\33\1\34\1\23\1\0\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\23\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\23\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\3\23\1\0\1\62\1\0\1\11"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\63";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\3\1\1\1\3"+
    "\1\4\1\5\17\6\1\7\2\10\1\7\1\10\1\1"+
    "\3\0\1\11\14\6\1\12\5\6\1\0\1\7\1\2"+
    "\1\7\3\0\1\13\16\6\3\0\1\13\6\6\1\14"+
    "\2\0\1\13\3\6\2\0\1\6\13\0\1\15\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\150\0\u0138"+
    "\0\u016c\0\u01a0\0\150\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\234\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u01d4\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u05b0\0\u0a28"+
    "\0\u0548\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u01d4\0\u1040"+
    "\0\u1074\0\150\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\150\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\5\1\6\1\7\1\10\2\3\1\7"+
    "\1\3\1\11\1\12\1\13\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\3\1\7\1\14\1\22\1\23"+
    "\1\14\1\24\1\25\2\14\1\26\6\14\1\27\1\14"+
    "\1\30\1\14\1\31\1\32\1\7\1\3\1\33\1\34"+
    "\1\35\1\36\1\35\1\36\1\37\23\33\1\40\31\33"+
    "\65\0\6\4\77\0\1\7\54\0\1\41\63\0\1\42"+
    "\65\0\1\43\1\0\1\44\64\0\1\12\63\0\1\14"+
    "\2\0\6\14\4\0\25\14\22\0\1\14\2\0\6\14"+
    "\4\0\15\14\1\45\7\14\22\0\1\14\2\0\6\14"+
    "\4\0\7\14\1\46\15\14\22\0\1\14\2\0\6\14"+
    "\4\0\12\14\1\47\12\14\22\0\1\14\2\0\6\14"+
    "\4\0\14\14\1\50\10\14\22\0\1\14\2\0\6\14"+
    "\4\0\21\14\1\51\3\14\22\0\1\14\2\0\6\14"+
    "\4\0\17\14\1\52\5\14\22\0\1\14\2\0\6\14"+
    "\4\0\12\14\1\53\2\14\1\54\7\14\22\0\1\14"+
    "\2\0\6\14\4\0\12\14\1\55\1\14\1\56\10\14"+
    "\22\0\1\14\2\0\6\14\4\0\1\57\14\14\1\60"+
    "\7\14\22\0\1\14\2\0\6\14\4\0\5\14\1\61"+
    "\5\14\1\62\11\14\22\0\1\14\2\0\6\14\4\0"+
    "\4\14\1\63\20\14\22\0\1\14\2\0\6\14\4\0"+
    "\17\14\1\64\5\14\22\0\1\14\2\0\6\14\4\0"+
    "\15\14\1\65\7\14\22\0\1\14\2\0\6\14\4\0"+
    "\7\14\1\66\15\14\2\0\2\33\1\0\1\33\1\0"+
    "\25\33\1\67\32\33\1\34\1\37\1\70\1\37\1\70"+
    "\1\34\23\33\1\67\32\33\1\71\1\4\1\71\1\4"+
    "\2\71\23\33\1\67\31\33\1\0\2\37\1\4\1\37"+
    "\1\4\1\37\55\0\5\33\1\72\55\33\32\0\1\73"+
    "\63\0\1\74\32\0\15\75\1\76\46\75\2\44\1\0"+
    "\2\44\1\0\56\44\20\0\1\14\2\0\6\14\4\0"+
    "\15\14\1\77\7\14\22\0\1\14\2\0\6\14\4\0"+
    "\1\60\24\14\22\0\1\14\2\0\6\14\4\0\15\14"+
    "\1\100\7\14\22\0\1\14\2\0\6\14\4\0\21\14"+
    "\1\61\3\14\22\0\1\14\2\0\6\14\4\0\17\14"+
    "\1\101\5\14\22\0\1\14\2\0\6\14\4\0\4\14"+
    "\1\102\20\14\22\0\1\14\2\0\6\14\4\0\1\103"+
    "\24\14\22\0\1\14\2\0\6\14\4\0\14\14\1\104"+
    "\10\14\22\0\1\14\2\0\6\14\4\0\20\14\1\105"+
    "\4\14\22\0\1\14\2\0\6\14\4\0\22\14\1\106"+
    "\2\14\22\0\1\14\2\0\6\14\4\0\12\14\1\107"+
    "\12\14\22\0\1\14\2\0\6\14\4\0\17\14\1\61"+
    "\5\14\22\0\1\14\2\0\6\14\4\0\16\14\1\110"+
    "\6\14\22\0\1\14\2\0\6\14\4\0\21\14\1\111"+
    "\3\14\22\0\1\14\2\0\6\14\4\0\22\14\1\112"+
    "\2\14\22\0\1\14\2\0\6\14\4\0\10\14\1\113"+
    "\14\14\22\0\1\14\2\0\6\14\4\0\10\14\1\114"+
    "\14\14\2\0\1\33\1\70\1\4\1\70\1\4\2\70"+
    "\23\33\1\67\35\33\1\0\25\33\1\67\31\33\34\0"+
    "\1\115\63\0\1\116\27\0\15\75\1\117\46\75\15\0"+
    "\1\76\1\0\1\120\64\0\1\14\2\0\6\14\4\0"+
    "\12\14\1\61\12\14\22\0\1\14\2\0\6\14\4\0"+
    "\1\50\24\14\22\0\1\14\2\0\6\14\4\0\10\14"+
    "\1\121\14\14\22\0\1\14\2\0\6\14\4\0\1\122"+
    "\24\14\22\0\1\14\2\0\6\14\4\0\20\14\1\123"+
    "\4\14\22\0\1\14\2\0\6\14\4\0\21\14\1\124"+
    "\3\14\22\0\1\14\2\0\6\14\4\0\4\14\1\61"+
    "\20\14\22\0\1\14\2\0\6\14\4\0\13\14\1\61"+
    "\11\14\22\0\1\14\2\0\6\14\4\0\20\14\1\112"+
    "\4\14\22\0\1\14\2\0\6\14\4\0\15\14\1\125"+
    "\7\14\22\0\1\14\2\0\6\14\4\0\22\14\1\126"+
    "\2\14\22\0\1\14\2\0\6\14\4\0\4\14\1\127"+
    "\20\14\22\0\1\14\2\0\6\14\4\0\3\14\1\61"+
    "\21\14\22\0\1\14\2\0\6\14\4\0\12\14\1\105"+
    "\12\14\12\0\1\130\65\0\1\131\51\0\15\75\1\117"+
    "\1\75\1\132\44\75\17\0\1\120\64\0\1\14\2\0"+
    "\6\14\4\0\14\14\1\133\10\14\22\0\1\14\2\0"+
    "\6\14\4\0\11\14\1\61\13\14\22\0\1\14\2\0"+
    "\6\14\4\0\20\14\1\61\4\14\22\0\1\14\2\0"+
    "\6\14\4\0\10\14\1\134\14\14\22\0\1\14\2\0"+
    "\6\14\4\0\17\14\1\50\5\14\22\0\1\14\2\0"+
    "\6\14\4\0\17\14\1\135\5\14\34\0\1\136\63\0"+
    "\1\137\51\0\1\14\2\0\6\14\4\0\6\14\1\61"+
    "\16\14\22\0\1\14\2\0\6\14\4\0\14\14\1\140"+
    "\10\14\22\0\1\14\2\0\6\14\4\0\14\14\1\61"+
    "\10\14\35\0\1\141\63\0\1\142\50\0\1\14\2\0"+
    "\6\14\4\0\22\14\1\105\2\14\64\0\1\143\63\0"+
    "\1\144\33\0\1\145\63\0\1\146\47\0\1\147\63\0"+
    "\1\150\61\0\1\151\63\0\1\152\64\0\1\153\60\0"+
    "\1\154\61\0\1\155\53\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5148];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\3\1\1\11\25\1\3\0"+
    "\23\1\1\0\3\1\3\0\17\1\3\0\10\1\2\0"+
    "\1\11\3\1\2\0\1\1\13\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { yybegin(YYINITIAL); return PrismioTypes.OPERATOR;
            }
          // fall through
          case 17: break;
          case 4:
            { yybegin(YYINITIAL); return PrismioTypes.INTEGER;
            }
          // fall through
          case 18: break;
          case 5:
            { yybegin(WAITING_VALUE); return PrismioTypes.SEPARATOR;
            }
          // fall through
          case 19: break;
          case 6:
            { yybegin(YYINITIAL); return PrismioTypes.IDENTIFIER;
            }
          // fall through
          case 20: break;
          case 7:
            { yybegin(YYINITIAL); return PrismioTypes.VALUE;
            }
          // fall through
          case 21: break;
          case 8:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 9:
            { yybegin(YYINITIAL); return PrismioTypes.SINGLE_LINE_COMMENT;
            }
          // fall through
          case 23: break;
          case 10:
            { yybegin(YYINITIAL); return PrismioTypes.KEYWORD;
            }
          // fall through
          case 24: break;
          case 11:
            { yybegin(YYINITIAL); return PrismioTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 25: break;
          case 12:
            { yybegin(YYINITIAL); return PrismioTypes.BOOLEAN;
            }
          // fall through
          case 26: break;
          case 13:
            { yybegin(YYINITIAL); return PrismioTypes.CHARACTER_LITERAL;
            }
          // fall through
          case 27: break;
          case 14:
            { yybegin(YYINITIAL); return PrismioTypes.STRING_LITERAL;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
